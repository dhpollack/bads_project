iris
library(caret)
idx = createDataPartition(iris, p = 0.2)
idx = createDataPartition(nrow(iris), p = 0.2)
idx = createDataPartition(1:nrow(iris), p = 0.2)
idx = createDataPartition(iris, p = 0.2)
idx = createDataPartition(1:nrow(iris), p = 0.2)
length(idx)
idx[1]
idx = createDataPartition(1:nrow(iris), p = 0.2, list = FALSE)
X_train = iris[-idx, -5]
y_train = iris[-idx, 5]
X_test = iris[idx, -5]
y_train = iris[idx, 5]
y_train = iris[-idx, 5]
y_test = iris[idx, 5]
y_test
idx = createDataPartition(1:nrow(iris), p = 0.2, list = F)
X_train = iris[-idx, -5]
y_train = iris[-idx, 5]
X_test = iris[idx, -5]
y_test = iris[idx, 5]
model.control = trainControl(method="cv", number = 5, summaryFunction = twoClassSummary)
model.rf = train(Species~., method="rf", mtry=3, trControl=trainControl("none"), importance=T)
model.rf = train(Species~., data=iris, method="rf", mtry=3, trControl=trainControl("none"), importance=T)
model.rf = train(Species~., data=iris, method="rf", mtry=3, trControl=model.control, importance=T)
model.control = trainControl(method="cv", number = 5)
model.rf = train(Species~., data=iris, method="rf", mtry=3, trControl=model.control, importance=T)
BreastCancer
data(BreastCancer)
model.control = trainControl(method="cv", number = 5)
model.rf = train(Species~., data=iris, method="rf", mtry=3, trControl=model.control, importance=T)
X_train
y_train
model.rf = train(X_train, y_train, method="rf", mtry=3, trControl=model.control, importance=T)
model.rf = randomForest(X_train, y_train, mtry = 3, importance = T)
varImp(model.rf)
varImp(model.rf, scale=F)
importance(model.rf)
importance(model.rf, scale=F)
setwd("~/Programming/R/bads/project")
setwd("~/Programming/R/bads/ex09")
source("../helpfuncs/helpFuncs.R")
setwd("~/Programming/R/bads/ex09")
source("../helpfuncs/helpFuncs.R")
source("../helpfuncs/helpfuncs.R")
loans = get.loan.dataset("../data/Loan_Data.csv")
require(caret)
require(randomForest)
require(foreach)
idx.train_test_ = createDataPartition(loans$BAD, p = 0.8, list = F)
train_test_ = loans[idx.train_test_, ]
valid_ = loans[-idx.train_test_, ]
model.control = trainControl(method = "cv", number = 5,
classProbs = T, summaryFunction = twoClassSummary,
returnData = F)
seq(1, 7, 2)
rf.params = expand.grid(mtry = seq(1, 7, 2))
model.rf = train(BAD ~ ., data=train_test_,
method = "rf",
tuneGrid = rf.params,
trControl = model.control,
metric = "ROC")
metric = "accuracy")
model.rf = train(BAD ~ ., data=train_test_,
method = "rf",
tuneGrid = rf.params,
trControl = model.control,
metric = "accuracy")
require(ROC)
require(pROC)
trControl = model.control)
model.rf = train(BAD ~ ., data=train_test_,
method = "rf",
tuneGrid = rf.params,
trControl = model.control)
model.control = trainControl(method = "cv", number = 5,
classProbs = T,
returnData = F)
rf.params = expand.grid(mtry = seq(1, 7, 2))
model.rf = train(BAD ~ ., data=train_test_,
method = "rf",
tuneGrid = rf.params,
trControl = model.control)
print(model.rf)
yhat = predict(model.rf, newdata = valid_)
sum(yhat)
table(yhat)
yhat_probs = predict(model.rf, newdata = valid_, type = "prob")
View(yhat_probs)
hist(yhat_probs[,2])
hist(yhat_probs[,1])
seq(0.01, 1, 0.01)
for(p in seq(1, 0.8, -0.05)) {
yhat_search = ifelse(yhat_probs <= p, 1, 2)
table(valid_$BAD, yhat_search)
}
valid_$BAD
ifelse(yhat_probs <= p, 1, 2)
yhat_search = ifelse(yhat_probs[,1] <= p, 1, 2)
for(p in seq(1, 0.8, -0.05)) {
yhat_search = ifelse(yhat_probs[,1] <= p, 1, 2)
table(valid_$BAD, yhat_search)
}
for(p in seq(1, 0.8, -0.05)) {
yhat_search = ifelse(yhat_probs[,1] <= p, 1, 2)
print(table(valid_$BAD, yhat_search))
}
for(p in seq(1, 0.8, -0.05)) {
yhat_search = ifelse(yhat_probs[,1] <= p, 1, 2)
print(p)
print(table(valid_$BAD, yhat_search))
}
tot_correct = foreach(p = seq(1, 0.8, -0.05)) {
yhat_search = factor(ifelse(yhat_probs[,1] <= p, "GOOD", "BAD"))
t = table(valid_$BAD, yhat_search)
print(p)
print(table(valid_$BAD, yhat_search))
sum(yhat_search == valid_$BAD)
}
tot_correct = foreach(p = seq(1, 0.8, -0.05)) %do% {
yhat_search = factor(ifelse(yhat_probs[,1] <= p, "GOOD", "BAD"))
t = table(valid_$BAD, yhat_search)
print(p)
print(table(valid_$BAD, yhat_search))
sum(yhat_search == valid_$BAD)
}
tot_correct = foreach(p = seq(1, 0.8, -0.05)) %do% {
yhat_search = factor(ifelse(yhat_probs[,1] <= p, 1, 2))
t = table(valid_$BAD, yhat_search)
print(p)
print(table(valid_$BAD, yhat_search))
sum(yhat_search == valid_$BAD)
}
tot_correct = foreach(p = seq(1, 0.8, -0.05)) %do% {
yhat_search = factor(ifelse(yhat_probs[,1] <= p, 1, 2))
print(levels(valid_$BAD))
print(levels(yhat_search))
t = table(valid_$BAD, yhat_search)
print(p)
print(table(valid_$BAD, yhat_search))
sum(yhat_search == valid_$BAD)
}
yhat_search = factor(ifelse(yhat_probs[,1] <= p, "GOOD", "BAD"))
yhat_search = factor(ifelse(yhat_probs[,1] >= p, "GOOD", "BAD"))
yhat_search = factor(ifelse(yhat_probs[,1] >= p, "BAD", "GOOD"))
yhat_search = factor(ifelse(yhat_probs[,1] >= p, "BAD", "GOOD"))
yhat_search = factor(ifelse(yhat_probs[,1] >= p, "GOOD", "BAD"))
yhat_search = factor(ifelse(yhat_probs[,1] <= p, "GOOD", "BAD"))
print(levels(valid_$BAD))
t = table(valid_$BAD, yhat_search)
print(table(valid_$BAD, yhat_search))
tot_correct = foreach(p = seq(1, 0.8, -0.05)) %do% {
yhat_search = factor(ifelse(yhat_probs[,1] <= p, "GOOD", "BAD"))
print(levels(valid_$BAD))
print(levels(yhat_search))
t = table(valid_$BAD, yhat_search)
print(p)
print(table(valid_$BAD, yhat_search))
sum(yhat_search == valid_$BAD)
}
sum(ifelse(yhat_search == valid_$BAD,1,0))
tot_correct = foreach(p = seq(1, 0.8, -0.05)) %do% {
yhat_search = factor(ifelse(yhat_probs[,1] <= p, "GOOD", "BAD"))
print(levels(valid_$BAD))
print(levels(yhat_search))
t = table(valid_$BAD, yhat_search)
print(p)
print(table(valid_$BAD, yhat_search))
sum(ifelse(yhat_search == valid_$BAD,1,0))
}
tot_correct = foreach(p = seq(1, 0.8, -0.05)) %do% {
yhat_search = factor(ifelse(yhat_probs[,1] <= p, "GOOD", "BAD"), levels=levels(valid_$BAD))
print(levels(valid_$BAD))
print(levels(yhat_search))
t = table(valid_$BAD, yhat_search)
print(p)
print(table(valid_$BAD, yhat_search))
sum(ifelse(yhat_search == valid_$BAD,1,0))
}
tot_correct = foreach(p = seq(1, 0.8, -0.01)) %do% {
yhat_search = factor(ifelse(yhat_probs[,1] <= p, "GOOD", "BAD"), levels=levels(valid_$BAD))
print(levels(valid_$BAD))
print(levels(yhat_search))
t = table(valid_$BAD, yhat_search)
print(p)
print(table(valid_$BAD, yhat_search))
sum(ifelse(yhat_search == valid_$BAD,1,0))
}
tot_correct = foreach(p = seq(1, 0.8, -0.005)) %do% {
yhat_search = factor(ifelse(yhat_probs[,1] <= p, "GOOD", "BAD"), levels=levels(valid_$BAD))
print(levels(valid_$BAD))
print(levels(yhat_search))
t = table(valid_$BAD, yhat_search)
print(p)
print(table(valid_$BAD, yhat_search))
sum(ifelse(yhat_search == valid_$BAD,1,0))
}
plot(tot_correct)
plot(1:length(tot_correct), tot_correct)
tot_correct = foreach(p = seq(1, 0.8, -0.001)) %do% {
yhat_search = factor(ifelse(yhat_probs[,1] <= p, "GOOD", "BAD"), levels=levels(valid_$BAD))
print(levels(valid_$BAD))
print(levels(yhat_search))
t = table(valid_$BAD, yhat_search)
print(p)
print(table(valid_$BAD, yhat_search))
sum(ifelse(yhat_search == valid_$BAD,1,0))
}
plot(1:length(tot_correct), tot_correct)
tot_correct = foreach(p = seq(1, 0.8, -0.001)) %do% {
yhat_search = factor(ifelse(yhat_probs[,1] <= p, "GOOD", "BAD"), levels=levels(valid_$BAD))
t = table(valid_$BAD, yhat_search)
sum(ifelse(yhat_search == valid_$BAD,1,0))
}
plot(1:length(tot_correct), tot_correct)
print(model.rf)
model.rf = train(BAD ~ ., data=train_test_,
method = "rf",
tuneGrid = rf.params,
trControl = model.control,
metric = "Kappa")
print(model.rf)
yhat = predict(model.rf, newdata = valid_)
table(yhat)
yhat_probs = predict(model.rf, newdata = valid_, type = "prob")
hist(yhat_probs[,1])
tot_correct = foreach(p = seq(1, 0.8, -0.001)) %do% {
yhat_search = factor(ifelse(yhat_probs[,1] <= p, "GOOD", "BAD"), levels=levels(valid_$BAD))
t = table(valid_$BAD, yhat_search)
sum(ifelse(yhat_search == valid_$BAD,1,0))
}
plot(1:length(tot_correct), tot_correct)
tot_correct = foreach(p = seq(1, 0.0, -0.1)) %do% {
yhat_search = factor(ifelse(yhat_probs[,1] <= p, "GOOD", "BAD"), levels=levels(valid_$BAD))
t = table(valid_$BAD, yhat_search)
sum(ifelse(yhat_search == valid_$BAD,1,0))
}
plot(1:length(tot_correct), tot_correct)
tot_correct = foreach(p = seq(1, 0.0, -0.01)) %do% {
yhat_search = factor(ifelse(yhat_probs[,1] <= p, "GOOD", "BAD"), levels=levels(valid_$BAD))
t = table(valid_$BAD, yhat_search)
sum(ifelse(yhat_search == valid_$BAD,1,0))
}
plot(1:length(tot_correct), tot_correct)
tot_correct = foreach(p = seq(1, 0.0, -0.01)) %do% {
yhat_search = factor(ifelse(yhat_probs[,1] <= p, "BAD", "GOOD"), levels=levels(valid_$BAD))
t = table(valid_$BAD, yhat_search)
sum(ifelse(yhat_search == valid_$BAD,1,0))
}
plot(1:length(tot_correct), tot_correct)
tot_correct = foreach(p = seq(1, 0.0, -0.01)) %do% {
yhat_search = factor(ifelse(yhat_probs[,1] <= p, "GOOD", "BAD"), levels=levels(valid_$BAD))
t = table(valid_$BAD, yhat_search)
sum(ifelse(yhat_search == valid_$BAD,1,0))
}
plot(1:length(tot_correct), tot_correct)
axline(1/2)
plot(1:length(tot_correct), tot_correct)
axline(1/2)
abline(1/2)
abline(h=1/2)
abline(h=180)
abline(h=180, color = "red")
abline(h=180, c = "red")
abline(h=180, colour = "red")
abline(h=180, col = "red")
plot(1:length(tot_correct), tot_correct)
abline(h=180, col = "red")
abline(h=sum(valid_$BAD), col = "red")
abline(h=table(valid_$BAD)[1], col = "red")
plot(1:length(tot_correct), tot_correct)
abline(h=table(valid_$BAD)[1], col = "red")
model.rf = train(BAD ~ ., data=train_test_,
method = "rf",
tuneGrid = rf.params,
trControl = model.control,
metric = "Kappa",
importance = T)
print(model.rf)
heatmap(cov(loans))
str(loans)
varImp(model.rf)
varImp(model.rf, scale = F)
importance(model.rf)
importance(valid_)
importance(model.rf)
(importance(model.rf))
(VI=importance(model.rf))
varImp(model.rf, scale = F)
varImpPlot(model.rf)
str(model.rf)
varImpPlot(model.rf$finalModel)
importance(model.rf$finalModel)
varImpPlot(model.rf$finalModel, type=2)
rf.final = model.rf$finalModel
partialPlot(rf.final)
partialPlot?
dajfe0pq39eu
rewgjiw349
?partialPlot
partialPlot(rf.final, valid_, YOB)
partialPlot(rf.final, valid_, "YOB")
partialPlot(rf.final, valid_, x.var = 1)
partialPlot(rf.final, valid_)
partialPlot(rf.final, valid_, valid_$YOB)
partialPlot(rf.final, valid_, train_test_$YOB)
partialPlot(rf.final, valid_, YOB)
partialPlot(rf.final, valid_, x.YOB)
partialPlot(rf.final, valid_, valid_YOB)
partialPlot(rf.final, valid_, valid_$YOB)
valid_
partialPlot(rf.final, valid_, valid_$dINC_A)
partialPlot(rf.final, valid_, "dINC_A")
partialPlot(rf.final, valid_, x.var = "dINC_A")
idx.train_test_ = createDataPartition(loans$BAD, p = 0.8, list = F)
train_test_ = loans[idx.train_test_, ]
valid_ = loans[-idx.train_test_, ]
model.control = trainControl(method = "cv", number = 5,
classProbs = T,
returnData = F)
rf.params = expand.grid(mtry = seq(1, 7, 2))
model.rf = train(BAD ~ ., data=train_test_,
method = "rf",
tuneGrid = rf.params,
trControl = model.control,
metric = "Kappa",
importance = T)
print(model.rf)
yhat = predict(model.rf, newdata = valid_)
table(yhat)
yhat_probs = predict(model.rf, newdata = valid_, type = "prob")
hist(yhat_probs[,1])
tot_correct = foreach(p = seq(1, 0.0, -0.01)) %do% {
yhat_search = factor(ifelse(yhat_probs[,1] <= p, "GOOD", "BAD"), levels=levels(valid_$BAD))
t = table(valid_$BAD, yhat_search)
sum(ifelse(yhat_search == valid_$BAD,1,0))
}
plot(1:length(tot_correct), tot_correct)
abline(h=table(valid_$BAD)[1], col = "red")
varImp(model.rf, scale = F)
importance(model.rf$finalModel)
varImpPlot(model.rf$finalModel, type=2)
rf.final = model.rf$finalModel
partialPlot(rf.final, train_test_, x.var = "dINC_A")
partialPlot(rf.final, valid_, x.var = "dINC_A")
partialPlot(model.rf$finalModel, valid_, x.var = "dINC_A")
partialPlot(model.rf, valid_, x.var = "dINC_A")
partialPlot(model.rf$finalModel, valid_, x.var = "YOB")
names(valid_)
names(train_test_)
partialPlot(model.rf$finalModel, valid_[,1:5], x.var = "YOB")
partialPlot(model.rf$finalModel, valid_[,2:5], x.var = "YOB")
partialPlot(model.rf$finalModel, valid_[,1:5], x.var = "YOB")
partialPlot(model.rf$finalModel, valid_[,1:4], x.var = "YOB")
partialPlot(model.rf$finalModel, valid_[,1:2], x.var = "YOB")
partialPlot(model.rf$finalModel, valid_[,1:8], x.var = "YOB")
varImpPlot(model.rf$finalModel, type=2)

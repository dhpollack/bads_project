# Notice, however, that in the traintest data 49608 observations feature a blank ""
# which essentially a missing value, too!
sum(traintest$postcode_delivery == "")
# Export the able
print.xtable(xtable(VarMissingMat), file = "./output/Graphs_Tables/VarMissingMat.txt")
write.csv(VarMissingMat, file = "./output/Graphs_Tables/VarMissingMat.csv")
rm(VarMissingMat, VarMissingNObs, VarMissing, VarMissing2, ncol)
# Generate frequency tables for bi- and multinomial variables
# prepare function
FreqTableMultinom = function(data = NA, nobs = NA){
nobs = length(data)
useNA = ifelse((anyNA(data) == TRUE), "always", "no")
freqTable = table(data, useNA = useNA)
freqTable = as.data.frame.table(freqTable)
# rownames(freqTable) = freqTable$data
freqTable$percent = (freqTable$Freq / nobs) * 100
freqTable = freqTable[order(freqTable$Freq, decreasing = TRUE),]
}
# Tables and analysis of initially given data
binVar = c("title", "newsletter", "delivery", "coupon", "giftwrapping")
# Extract frequency tables for dummy variables
#binVarFreqTables_handin = lapply(handin[, binVar], FUN = FreqTableMultinom)
#binVarFreqTables_traintest = lapply(traintest[, binVar], FUN = FreqTableMultinom)
# Extract frequency tables for multinomial variables
multinomVar = c("model", "goods_value", "referrer", "cost_shipping", "payment",
"form_of_address","email_domain", "advertising_code",
"postcode_invoice", "postcode_delivery")
#multinomVarFreqTables_handin = lapply(handin[, multinomVar], FUN = FreqTableMultinom)
#multinomVarFreqTables_traintest = lapply(traintest[, multinomVar], FUN = FreqTableMultinom)
# Extract frequency tables for count variables
countVar = c(colnames(traintest[,c(16,24:36)]), "remitted_items", "canceled_items")
#countVarFreqTables_handin = lapply(handin[, countVar], FUN = FreqTableMultinom)
#countVarFreqTables_traintest = lapply(traintest[, countVar], FUN = FreqTableMultinom)
iniVarFull = c(binVar, multinomVar, countVar)
iniVarFullFreqTables_handin = lapply(handin[, iniVarFull], FUN = FreqTableMultinom)
iniVarFullFreqTables_traintest = lapply(traintest[, iniVarFull], FUN = FreqTableMultinom)
FreqTableSum_List = as.list(rep(NA, length(iniVarFull)))
names(FreqTableSum_List) <- iniVarFull
i = 1
while(i < (length(iniVarFull) + 1)){
tt = as.data.frame(iniVarFullFreqTables_traintest[iniVarFull[i]])
hi = as.data.frame(iniVarFullFreqTables_handin[iniVarFull[i]])
# Generate a list containing all frequency tables of interest
full = merge(tt, hi, by=colnames(tt)[1], all.x = TRUE, all.y = TRUE)
rownames(full) = NULL
# full = full[,-1]
colnames(full) = c("Observed Value", "traintest NObs", "traintest %", "handin NObs", "handin %")
FreqTableSum_List[i] = list(full)
# Generate and save all frequency tables in LaTeX format
NameFile = paste0("./output/Graphs_Tables/", iniVarFull[i], "_FreqTab_PreTransform")
print.xtable(xtable(full), file = paste0(NameFile, ".txt"))
write.csv(full, file = paste0(NameFile, ".csv"))
i = i + 1
}
# Zoom in: extract and export the sparse advertising codes
Advert_Sparse = as.data.frame(FreqTableSum_List$advertising_code)
Advert_Sparse = Advert_Sparse[(Advert_Sparse$`traintest NObs` < 6 | Advert_Sparse$`handin NObs` < 6),c(1,2,4)]
print.xtable(xtable(Advert_Sparse), file = "./output/Graphs_Tables/AdvertFreqMat_sparse.txt")
write.csv(Advert_Sparse, file = "./output/Graphs_Tables/AdvertFreqMat_sparse.csv")
# Points redeemed is an irrelevant variable
paste("In the traintest dataset,", sum(traintest$points_redeemed), "customers redeemed points", sep = " ")
paste("In the handin dataset,", sum(handin$points_redeemed), "customers redeemed points", sep = " ")
# Post Variable Removal
rm(full, hi, tt, binVar, countVar, i, iniVarFullFreqTables_handin, iniVarFullFreqTables_traintest,
multinomVar, NameFile, FreqTableSum_List, Advert_Sparse)
# uncomment to keep information
# Obtain the post-transform frequency tables of those variables
iniVarFull = iniVarFull[-which(iniVarFull == "item_count")]
iniVarFullFreqTables_handin_trans = lapply(handin_trans[, iniVarFull], FUN = FreqTableMultinom)
iniVarFullFreqTables_traintest_trans = lapply(traintest_trans[, iniVarFull], FUN = FreqTableMultinom)
FreqTableSum_List = as.list(rep(NA, length(iniVarFull)))
names(FreqTableSum_List) <- iniVarFull
i = 1
while(i < (length(iniVarFull) + 1)){
tt = as.data.frame(iniVarFullFreqTables_traintest_trans[iniVarFull[i]])
hi = as.data.frame(iniVarFullFreqTables_handin_trans[iniVarFull[i]])
# Generate a list containing all frequency tables of interest
full = merge(tt, hi, by=colnames(tt)[1], all.x = TRUE, all.y = TRUE)
rownames(full) = NULL
# full = full[,-1]
colnames(full) = c("Observed Value", "traintest NObs", "traintest %", "handin NObs", "handin %")
FreqTableSum_List[i] = list(full)
# Generate and save all frequency tables in LaTeX format
NameFile = paste0("./output/Graphs_Tables/", iniVarFull[i], "_FreqTab_PostTransform")
print.xtable(xtable(full), file = paste0(NameFile, ".txt"))
write.csv(full, file = paste0(NameFile, ".csv"))
i = i + 1
}
# Post-transformation frequency tables of newly generated variables
NewVars1 = c(colnames(traintest_trans[37:63]), "postcode_delivery")
NewVars1FreqTables_handin = lapply(handin_trans[, NewVars1], FUN = FreqTableMultinom)
NewVars1FreqTables_traintest = lapply(traintest_trans[, NewVars1], FUN = FreqTableMultinom)
FreqTableSum_NewVars1 = as.list(rep(NA, length(NewVars1)))
names(FreqTableSum_NewVars1) <- NewVars1
i = 1
while(i < (length(NewVars1) + 1)){
tt = as.data.frame(NewVars1FreqTables_traintest[NewVars1[i]])
hi = as.data.frame(NewVars1FreqTables_handin[NewVars1[i]])
# Generate a list containing all frequency tables of interest
full = merge(tt, hi, by=colnames(tt)[1], all.x = TRUE, all.y = TRUE)
rownames(full) = NULL
# full = full[,-1]
colnames(full) = c("Observed_Value", "traintest NObs", "traintest %", "handin NObs", "handin %")
FreqTableSum_NewVars1[i] = list(full)
# Generate and save all frequency tables in LaTeX format
NameFile = paste0("./output/Graphs_Tables/", NewVars1[i], "_FreqTab_NewVar")
print.xtable(xtable(full), file = paste0(NameFile, ".txt"))
write.csv(full, file= paste0(NameFile, ".csv"))
i = i + 1
}
# Variable removal
rm(full, hi, tt, i, FreqTableSum_NewVars1, NewVars1, NewVars1FreqTables_traintest,
NewVars1FreqTables_handin,  NameFile)
# uncomment to keep variables
# Summary stats for Weight of Evidence
# (1) Identify WoE variables
WoEVars = colnames(traintest_trans)[str_detect(colnames(traintest_trans), "woe")]
# (2) Set up list for summary stats
SmartSummary = function(data = NA){
A = (as.matrix(summary(data)))
return(A)
}
WoESum_List <- t(sapply(traintest_trans[,WoEVars], FUN = SmartSummary))
colnames(WoESum_List) = c("Min.", "1st Qu.", "Median", "Mean", "3rd Qu.", "Max.")
WoESum_List = as.data.frame(WoESum_List)
print.xtable(xtable(WoESum_List), file = "./output/Graphs_Tables/WoEVars_SumTab.txt")
write.csv(WoESum_List, file= "./output/Graphs_Tables/WoEVars_SumTab.csv")
rm(WoESum_List, WoEVars)
#########################################################################################
# The subsequent code was used to generate other interesting tables we used in our report
# for the BADS assignment
#########################################################################################
# Transformation of 'advertising_code'
traintest$advertising_code = factor(traintest$advertising_code)
handin$advertising_code = factor(handin$advertising_code)
tmp_ad_levs = levels(traintest$advertising_code)
tmp_ad_levs[which(tmp_ad_levs=="")] = "Other"
tmp_ad_levs[which(tmp_ad_levs=="")] = "Other" # Implement this to avoid code to break if
# other dataset (class) contains levels which are not in the known(train) dataset
levels(traintest$advertising_code) = tmp_ad_levs
rm(tmp_ad_levs)
tmp_ad_levs = levels(handin$advertising_code)
tmp_ad_levs[which(tmp_ad_levs=="")] = "Other"
tmp_ad_levs[which(tmp_ad_levs=="")] = "Other" # Implement this to avoid code to break if
# other dataset (class) contains levels which are not in the known(train) dataset
levels(handin$advertising_code) = tmp_ad_levs
rm(tmp_ad_levs)
advert_Freq_traintest = FreqTableMultinom(data = traintest$advertising_code)
advert_Freq_handin = FreqTableMultinom(data = handin$advertising_code)
full = merge(advert_Freq_traintest, advert_Freq_handin,
by=colnames(advert_Freq_traintest)[1], all.x = TRUE, all.y = TRUE)
colnames(full) = c("Observed Value", "traintest NObs", "traintest %", "handin NObs", "handin %")
print.xtable(xtable(full), file = "./output/Graphs_Tables/AdvertFreqMat.txt")
write.csv(full, file = "./output/Graphs_Tables/AdvertFreqMat.csv")
# Export table of spares advertising codes
nrow(full[(na.omit(full$`traintest NObs`) < 6),])
print.xtable(xtable(full[(na.omit(full$`traintest NObs`) < 6),]),
file = "./output/Graphs_Tables/AdvertFreqMat_sparse.txt")
write.csv(full[(na.omit(full$`traintest NObs`) < 6),],
file = "./output/Graphs_Tables/AdvertFreqMat_sparse.csv")
# clear environment
rm(list = ls())
# Set your working directory
#setwd("C:/Users/PC/Dropbox/BA_DS/code")
# Since we need the transformed data for the plots
# We need to:
# (1) Load the helpFuncs
source("helpFuncs.R")
# (2) Load the required libraries for those
reqLibs = c("caret", "klaR", "stringr")
helpFuncs.installLibs(reqLibs)
rm(reqLibs)
# (3) load the transformed data of the train and the test dataset
train = helpFuncs.load.dataset("data/train.csv")
test  = helpFuncs.load.dataset("data/test.csv")
# Plot the return customer fraction
# retrieve N? of return and non-return customers and put into matrix
Resume_Mat = t(as.matrix(table(train$return_customer)))
rownames(Resume_Mat) = c("nObs") # label matrix nicely
colnames(Resume_Mat) = c("No", "Yes")
# Plot configurations
jpeg(filename = "./output/Graphs_Tables/RetCustDistr.jpg") # start the JPEG recorder
par(mar = c(rep(3,4))) # set plot margins
# Generate a pie chart
slices = Resume_Mat[1,] # Define the slices of the pie chart
lbls =  c("No", "Yes")
lbls = paste(Resume_Mat[1,], lbls) # Define nice label for the slices
pie(slices, labels = lbls, col = rainbow(length(lbls)),
main = "Did the customer return?", cex = 2, cex.lab = 6, cex.main = 2.5, lwd = 2)
# the cex values allow to set the font sizes in general, the slice labels and the header of the plot
# lwd controls the thickness of the lines drawn
# rainbow(length(lbls)) extracts two different colors from rainbow spectrum
dev.off() # finish recording - save the plot
rm(Resume_Mat, slices, lbls)
# Density plot order_date
# I resort to the numeric version of the date variables as that seems easier to extract the density function
dens_train_order_date = density(train$x_order_date_num)
dens_test_order_date = density(test$x_order_date_num)
# note that you need to further extract the x and y values
# of the density estimates to get an adequate plot
jpeg(filename = "./output/Graphs_Tables/order_date_density.jpg",
width = 480, height = 360)
par(mar = c(5,5,5,1)) # set plot margins
plot(dens_train_order_date$x, dens_train_order_date$y, col = "cadetblue4",
type = "l", main = "Order Date",
xaxt = "n", yaxt = "n", xlab = "Days since Jan 1st 2013", ylab = "Density",
cex = 1, cex.lab = 1.5, cex.main = 2.5, lwd = 4
) +
axis(1, cex.axis = 1, lwd = 2.5, lwd.ticks = 1)+
axis(2, cex.axis = 1, lwd = 2.5, lwd.ticks = 1)+
lines(dens_train_order_date$x, dens_test_order_date$y, col = "green", lwd = 4) +
legend("right", title = "Dataset", legend = c("train", "test"),
pch = c(16,16),col = c("cadetblue4", "green"), bty = "n", cex = 2)
# notice that cex.axis controls thickness of axis line
# lwd.ticks allows me to set the ticks less thick than other lines.
dev.off()
rm(dens_train_order_date, dens_test_order_date)
# Similar Exercise for account_creation_date
# extract the density function
dens_train_account_creation_date = density(train$x_account_creation_date_num)
dens_test_account_creation_date = density(test$x_account_creation_date_num)
# note that you need to further extract the x and y values
# of the density estimates to get an adequate plot
jpeg(filename = "./output/Graphs_Tables/account_creation_date_density.jpg",
width = 480, height = 360)
par(mar = c(5,5,5,1))
plot(dens_train_account_creation_date$x, dens_train_account_creation_date$y, col = "cadetblue4",
type = "l", main = "Account Creation Date",
xaxt = "n", yaxt = "n", xlab = "Days since Jan 1st 2013", ylab = "Density",
cex = 1, cex.lab = 1.5, cex.main = 2.5, lwd = 4,
) +
axis(1, cex.axis = 1, lwd = 2.5, lwd.ticks = 1)+
axis(2, cex.axis = 1, lwd = 2.5, lwd.ticks = 1)+
lines(dens_train_account_creation_date$x, dens_test_account_creation_date$y, col = "green", lwd = 4) +
legend("right", title = "Dataset", legend = c("train", "test"),
pch = c(16,16),col = c("cadetblue4", "green"), bty = "n", cex = 2)
dev.off()
rm(dens_train_account_creation_date, dens_test_account_creation_date)
# Same exercise for deliverydate estimated
# extract the density function
dens_train_deliverydate_estimated = density(train$x_deliverydate_estimated_num)
dens_test_deliverydate_estimated = density(test$x_deliverydate_estimated_num)
# note that you need to further extract the x and y values
# of the density estimates to get an adequate plot
jpeg(filename = "./output/Graphs_Tables/deliverydate_estimated_density.jpg",
width = 480, height = 360)
par(mar = c(5,5,5,1))
plot(dens_train_deliverydate_estimated$x, dens_train_deliverydate_estimated$y,
type = "l", main = "Delivery Date Estimated",
xaxt = "n", yaxt = "n", xlab = "Days since Jan 1st 2013", ylab = "Density",
cex = 1, cex.lab = 1.5, cex.main = 2.5, lwd = 4,
col = "cadetblue4") +
axis(1, cex.axis = 1, lwd = 2.5, lwd.ticks = 1) +
axis(2, cex.axis = 1, lwd = 2.5, lwd.ticks = 1) #+
lines(dens_test_deliverydate_estimated$x, dens_test_deliverydate_estimated$y, col = "green", lwd = 4) #+
legend("right", title = "Dataset", legend = c("train", "test"),
pch = c(16,16),col = c("cadetblue4", "green"), bty = "n", cex = 2)
dev.off()
rm(dens_train_deliverydate_estimated, dens_test_deliverydate_estimated)
# Same exercise for deliverydate actual
# extract the density function
dens_train_deliverydate_actual = density(train$x_deliverydate_actual_num)
dens_test_deliverydate_actual = density(test$x_deliverydate_actual_num)
# note that you need to further extract the x and y values
# of the density estimates to get an adequate plot
jpeg(filename = "./output/Graphs_Tables/deliverydate_actual_density.jpg",
width = 480, height = 360)
par(mar = c(5,5,5,1))
plot(dens_train_deliverydate_actual$x, dens_train_deliverydate_actual$y,
type = "l", main = "Delivery Date Actual",
xaxt = "n", yaxt = "n", xlab = "Days since Jan 1st 2013", ylab = "Density",
cex = 1, cex.lab = 1.5, cex.main = 2.5, lwd = 4,
col = "cadetblue4") +
axis(1, cex.axis = 1, lwd = 2.5, lwd.ticks = 1) +
axis(2, cex.axis = 1, lwd = 2.5, lwd.ticks = 1) #+
lines(dens_test_deliverydate_actual$x, dens_test_deliverydate_actual$y, col = "green", lwd = 4) #+
legend("right", title = "Dataset", legend = c("train", "test"),
pch = c(16,16),col = c("cadetblue4", "green"), bty = "n", cex = 2)
dev.off()
rm(dens_train_deliverydate_actual, dens_test_deliverydate_actual)
# Display a barplox stating the distribution of the original item count variable
# Since the distribution is similar in the test data, I refrain from plotting it here.
train_origin = read.csv(file = "./data/train.csv")
# Histogram of Item Count
item_count_to_20 = train_origin[(train_origin$item_count < 20), "item_count"]
# Since we have quite some outliers, I refrain from considering the 25 customers who ordered
nrow(train_origin) - length(item_count_to_20) # more than 20 items
# Generate a frequency table and get it into a data frame
item_count_table <- table(item_count_to_20, useNA = "no")
item_count_table <- as.data.frame.table(item_count_table)
colnames(item_count_table) = c("Items", "Freq")
# Based on the frequency table, generate a plot
jpeg(filename = "./output/Graphs_Tables/item_count_original_barplot.jpg",
width = 480, height = 360)
barplot(item_count_table$Freq, names.arg = item_count_table$Items,
ylim = c(0,30000), cex.lab = 3, cex.main = 2.5,
cex.names = 2, cex.axis = 2,
main = "Freq item count train data")
dev.off()
rm(train_origin, item_count_to_20, item_count_table)
# Histogram of recomputed item count
item_count_to_20 = train[(train$x_item_count < 20), "x_item_count"]
nrow(train) - length(item_count_to_20) # more than 20 items
# Generate a frequency table and get it into a data frame
item_count_table <- table(item_count_to_20, useNA = "no")
item_count_table <- as.data.frame.table(item_count_table)
colnames(item_count_table) = c("Items", "Freq")
# Based on the frequency table, generate a plot
jpeg(filename = "./output/Graphs_Tables/item_count_modified_barplot.jpg",
width = 480, height = 360)
barplot(item_count_table$Freq, names.arg = item_count_table$Items,
ylim = c(0,30000), cex.lab = 3, cex.main = 2.5,
cex.names = 2, cex.axis = 2,
main = "Freq item count train data")
dev.off()
rm(item_count_to_20, item_count_table)
# clear environment
rm(list = ls())
# Set your working directory
#setwd("C:/Users/PC/Dropbox/BA_DS/code")
# Since we need the transformed data for the plots
# We need to:
# (1) Load the helpFuncs
source("helpFuncs.R")
# (2) Load the required libraries for those
reqLibs = c("caret", "klaR", "stringr")
helpFuncs.installLibs(reqLibs)
rm(reqLibs)
# (3) load the transformed data of the train and the test dataset
train = helpFuncs.load.dataset("data/train.csv")
test  = helpFuncs.load.dataset("data/test.csv")
# Plot the return customer fraction
# retrieve N? of return and non-return customers and put into matrix
Resume_Mat = t(as.matrix(table(train$return_customer)))
rownames(Resume_Mat) = c("nObs") # label matrix nicely
colnames(Resume_Mat) = c("No", "Yes")
# Plot configurations
jpeg(filename = "./output/Graphs_Tables/RetCustDistr.jpg") # start the JPEG recorder
par(mar = c(rep(3,4))) # set plot margins
# Generate a pie chart
slices = Resume_Mat[1,] # Define the slices of the pie chart
lbls =  c("No", "Yes")
lbls = paste(Resume_Mat[1,], lbls) # Define nice label for the slices
pie(slices, labels = lbls, col = rainbow(length(lbls)),
main = "Did the customer return?", cex = 2, cex.lab = 6, cex.main = 2.5, lwd = 2)
# the cex values allow to set the font sizes in general, the slice labels and the header of the plot
# lwd controls the thickness of the lines drawn
# rainbow(length(lbls)) extracts two different colors from rainbow spectrum
dev.off() # finish recording - save the plot
rm(Resume_Mat, slices, lbls)
# Density plot order_date
# I resort to the numeric version of the date variables as that seems easier to extract the density function
dens_train_order_date = density(train$x_order_date_num)
dens_test_order_date = density(test$x_order_date_num)
# note that you need to further extract the x and y values
# of the density estimates to get an adequate plot
jpeg(filename = "./output/Graphs_Tables/order_date_density.jpg",
width = 480, height = 360)
par(mar = c(5,5,5,1)) # set plot margins
plot(dens_train_order_date$x, dens_train_order_date$y, col = "cadetblue4",
type = "l", main = "Order Date",
xaxt = "n", yaxt = "n", xlab = "Days since Jan 1st 2013", ylab = "Density",
cex = 1, cex.lab = 1.5, cex.main = 2.5, lwd = 4
) +
axis(1, cex.axis = 1, lwd = 2.5, lwd.ticks = 1) +
axis(2, cex.axis = 1, lwd = 2.5, lwd.ticks = 1)
lines(dens_train_order_date$x, dens_test_order_date$y, col = "green", lwd = 4)
legend("right", title = "Dataset", legend = c("train", "test"),
pch = c(16,16),col = c("cadetblue4", "green"), bty = "n", cex = 2)
# notice that cex.axis controls thickness of axis line
# lwd.ticks allows me to set the ticks less thick than other lines.
dev.off()
rm(dens_train_order_date, dens_test_order_date)
# Similar Exercise for account_creation_date
# extract the density function
dens_train_account_creation_date = density(train$x_account_creation_date_num)
dens_test_account_creation_date = density(test$x_account_creation_date_num)
# note that you need to further extract the x and y values
# of the density estimates to get an adequate plot
jpeg(filename = "./output/Graphs_Tables/account_creation_date_density.jpg",
width = 480, height = 360)
par(mar = c(5,5,5,1))
plot(dens_train_account_creation_date$x, dens_train_account_creation_date$y, col = "cadetblue4",
type = "l", main = "Account Creation Date",
xaxt = "n", yaxt = "n", xlab = "Days since Jan 1st 2013", ylab = "Density",
cex = 1, cex.lab = 1.5, cex.main = 2.5, lwd = 4,
) +
axis(1, cex.axis = 1, lwd = 2.5, lwd.ticks = 1)+
axis(2, cex.axis = 1, lwd = 2.5, lwd.ticks = 1)+
lines(dens_train_account_creation_date$x, dens_test_account_creation_date$y, col = "green", lwd = 4) +
legend("right", title = "Dataset", legend = c("train", "test"),
pch = c(16,16),col = c("cadetblue4", "green"), bty = "n", cex = 2)
dev.off()
rm(dens_train_account_creation_date, dens_test_account_creation_date)
# Same exercise for deliverydate estimated
# extract the density function
dens_train_deliverydate_estimated = density(train$x_deliverydate_estimated_num)
dens_test_deliverydate_estimated = density(test$x_deliverydate_estimated_num)
# note that you need to further extract the x and y values
# of the density estimates to get an adequate plot
jpeg(filename = "./output/Graphs_Tables/deliverydate_estimated_density.jpg",
width = 480, height = 360)
par(mar = c(5,5,5,1))
plot(dens_train_deliverydate_estimated$x, dens_train_deliverydate_estimated$y,
type = "l", main = "Delivery Date Estimated",
xaxt = "n", yaxt = "n", xlab = "Days since Jan 1st 2013", ylab = "Density",
cex = 1, cex.lab = 1.5, cex.main = 2.5, lwd = 4,
col = "cadetblue4") +
axis(1, cex.axis = 1, lwd = 2.5, lwd.ticks = 1) +
axis(2, cex.axis = 1, lwd = 2.5, lwd.ticks = 1) #+
lines(dens_test_deliverydate_estimated$x, dens_test_deliverydate_estimated$y, col = "green", lwd = 4) #+
legend("right", title = "Dataset", legend = c("train", "test"),
pch = c(16,16),col = c("cadetblue4", "green"), bty = "n", cex = 2)
dev.off()
rm(dens_train_deliverydate_estimated, dens_test_deliverydate_estimated)
# Same exercise for deliverydate actual
# extract the density function
dens_train_deliverydate_actual = density(train$x_deliverydate_actual_num)
dens_test_deliverydate_actual = density(test$x_deliverydate_actual_num)
# note that you need to further extract the x and y values
# of the density estimates to get an adequate plot
jpeg(filename = "./output/Graphs_Tables/deliverydate_actual_density.jpg",
width = 480, height = 360)
par(mar = c(5,5,5,1))
plot(dens_train_deliverydate_actual$x, dens_train_deliverydate_actual$y,
type = "l", main = "Delivery Date Actual",
xaxt = "n", yaxt = "n", xlab = "Days since Jan 1st 2013", ylab = "Density",
cex = 1, cex.lab = 1.5, cex.main = 2.5, lwd = 4,
col = "cadetblue4") +
axis(1, cex.axis = 1, lwd = 2.5, lwd.ticks = 1) +
axis(2, cex.axis = 1, lwd = 2.5, lwd.ticks = 1) #+
lines(dens_test_deliverydate_actual$x, dens_test_deliverydate_actual$y, col = "green", lwd = 4) #+
legend("right", title = "Dataset", legend = c("train", "test"),
pch = c(16,16),col = c("cadetblue4", "green"), bty = "n", cex = 2)
dev.off()
rm(dens_train_deliverydate_actual, dens_test_deliverydate_actual)
# Display a barplox stating the distribution of the original item count variable
# Since the distribution is similar in the test data, I refrain from plotting it here.
train_origin = read.csv(file = "./data/train.csv")
# Histogram of Item Count
item_count_to_20 = train_origin[(train_origin$item_count < 20), "item_count"]
# Since we have quite some outliers, I refrain from considering the 25 customers who ordered
nrow(train_origin) - length(item_count_to_20) # more than 20 items
# Generate a frequency table and get it into a data frame
item_count_table <- table(item_count_to_20, useNA = "no")
item_count_table <- as.data.frame.table(item_count_table)
colnames(item_count_table) = c("Items", "Freq")
# Based on the frequency table, generate a plot
jpeg(filename = "./output/Graphs_Tables/item_count_original_barplot.jpg",
width = 480, height = 360)
barplot(item_count_table$Freq, names.arg = item_count_table$Items,
ylim = c(0,30000), cex.lab = 3, cex.main = 2.5,
cex.names = 2, cex.axis = 2,
main = "Freq item count train data")
dev.off()
rm(train_origin, item_count_to_20, item_count_table)
# Histogram of recomputed item count
item_count_to_20 = train[(train$x_item_count < 20), "x_item_count"]
nrow(train) - length(item_count_to_20) # more than 20 items
# Generate a frequency table and get it into a data frame
item_count_table <- table(item_count_to_20, useNA = "no")
item_count_table <- as.data.frame.table(item_count_table)
colnames(item_count_table) = c("Items", "Freq")
# Based on the frequency table, generate a plot
jpeg(filename = "./output/Graphs_Tables/item_count_modified_barplot.jpg",
width = 480, height = 360)
barplot(item_count_table$Freq, names.arg = item_count_table$Items,
ylim = c(0,30000), cex.lab = 3, cex.main = 2.5,
cex.names = 2, cex.axis = 2,
main = "Freq item count train data")
dev.off()
rm(item_count_to_20, item_count_table)
jpeg(filename = "./output/Graphs_Tables/order_date_density.jpg",
width = 480, height = 360)
par(mar = c(5,5,5,1)) # set plot margins
plot(dens_train_order_date$x, dens_train_order_date$y, col = "cadetblue4",
type = "l", main = "Order Date",
xaxt = "n", yaxt = "n", xlab = "Days since Jan 1st 2013", ylab = "Density",
cex = 1, cex.lab = 1.5, cex.main = 2.5, lwd = 4
)
axis(1, cex.axis = 1, lwd = 2.5, lwd.ticks = 1)
axis(2, cex.axis = 1, lwd = 2.5, lwd.ticks = 1)
lines(dens_train_order_date$x, dens_test_order_date$y, col = "green", lwd = 4)
legend("right", title = "Dataset", legend = c("train", "test"),
pch = c(16,16),col = c("cadetblue4", "green"), bty = "n", cex = 2)
# notice that cex.axis controls thickness of axis line
# lwd.ticks allows me to set the ticks less thick than other lines.
dev.off()
rm(dens_train_order_date, dens_test_order_date)
# Density plot order_date
# I resort to the numeric version of the date variables as that seems easier to extract the density function
dens_train_order_date = density(train$x_order_date_num)
dens_test_order_date = density(test$x_order_date_num)
# note that you need to further extract the x and y values
# of the density estimates to get an adequate plot
jpeg(filename = "./output/Graphs_Tables/order_date_density.jpg",
width = 480, height = 360)
par(mar = c(5,5,5,1)) # set plot margins
plot(dens_train_order_date$x, dens_train_order_date$y, col = "cadetblue4",
type = "l", main = "Order Date",
xaxt = "n", yaxt = "n", xlab = "Days since Jan 1st 2013", ylab = "Density",
cex = 1, cex.lab = 1.5, cex.main = 2.5, lwd = 4
)
axis(1, cex.axis = 1, lwd = 2.5, lwd.ticks = 1)
axis(2, cex.axis = 1, lwd = 2.5, lwd.ticks = 1)
lines(dens_train_order_date$x, dens_test_order_date$y, col = "green", lwd = 4)
legend("right", title = "Dataset", legend = c("train", "test"),
pch = c(16,16),col = c("cadetblue4", "green"), bty = "n", cex = 2)
# notice that cex.axis controls thickness of axis line
# lwd.ticks allows me to set the ticks less thick than other lines.
dev.off()
rm(dens_train_order_date, dens_test_order_date)
